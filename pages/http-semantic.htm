<link rel="stylesheet" href="../style.css">

<title>http semantics</title>
<a href="../index.html">home</a>
<h2>HTTP Semantics</h2>
<date>September 18<sup>th</sup>, 2025</date>

<p class="drop">
	The HTTP Semantics is defined in 
	<a href="https://www.rfc-editor.org/rfc/rfc9110.html">RFC 9110</a>.
	HTTP is a client/server protocol that operates over a reliable transport- 
	or session-layer "connection".
</p>

<p>
	An HTTP "client" is a program that establishes a connection to a server for
	the purpose of sending one or more HTTP requests. An HTTP "server" is a 
	program that accepts connections in order to service HTTP requests by 
	sending HTTP responses.
</p>

<p>
	The terms client and server refer only to the roles that these programs 
	perform for a particular connection. The same program might act as a client 
	on some connections and a server on others.
</p>

<p>
	HTTP is defined as a 
	<a href="https://en.wikipedia.org/wiki/Stateless_protocol">stateless protocol</a>, 
	meaning that each request message's semantics can be understood in isolation, 
	and that the relationship between connections and messages on them has no 
	impact on the interpretation of those messages.
</p>

<p>
	For example, a CONNECT request (Section 9.3.6) or a request with the 
	Upgrade header field (Section 7.8) can occur at any time, not just in the 
	first message on a connection.<br>
	Many implementations depend on HTTP's stateless design in order to reuse 
	proxied connections or dynamically load balance requests across multiple 
	servers.
</p>

<p>
	As a result, a server <b>MUST NOT</b> assume that two requests on the same 
	connection are from the same user agent unless the connection is secured 
	and specific to that agent. Some non-standard HTTP extensions 
	(e.g., [RFC4559]) have been known to violate this requirement, resulting in 
	security and interoperability problems.
</p>

<p>
	The most familiar form of user agent is the general-purpose Web browser, but 
	that's only a small percentage of implementations. Other common user agents 
	include spiders (web-traversing robots), command-line tools, billboard 
	screens, household appliances, scales, light bulbs, firmware update scripts, 
	mobile apps, and communication devices in a multitude of shapes and sizes.
</p>

<small>&copy;2025. mellowboy</small>
